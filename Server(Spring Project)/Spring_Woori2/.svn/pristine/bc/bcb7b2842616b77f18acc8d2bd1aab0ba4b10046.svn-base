package com.mycompany.myapp.controller;

import java.io.*;
import java.util.*;

import javax.servlet.http.HttpServletResponse;

import org.json.*;
import org.slf4j.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.mycompany.myapp.dto.Schedule;
import com.mycompany.myapp.service.ScheduleService;

@Controller
public class ScheduleController {
	
	private static final Logger log = LoggerFactory.getLogger(ScheduleController.class);
	
	@Autowired
	private ScheduleService scheduleService;
	
	
	// 팀별-월별 일정리스트 가져오기 ( tid에 해당하는 리스트 가져와서 같은 연, 월인 일정 리스트 넘김 )
	@SuppressWarnings("deprecation")
	@RequestMapping("/schedule/getListByTid")
	public void getList(HttpServletResponse response, int tid, String sdate) {
		try {
			// 문자열 date를 sql.Date클래스로 변환
			String[] strArr = sdate.split("-");
			java.sql.Date date = new java.sql.Date(Integer.parseInt(strArr[0]), Integer.parseInt(strArr[1]), Integer.parseInt(strArr[2]));
			
			// tid에 해당하는 일정 리스트를 DB에서 가져오기
			List<Schedule> schedules = scheduleService.getListByTid(tid);
			
			// Date에 해당하는 리스트 거르기
			List<Schedule> schedulesByDate = new ArrayList<>();
			for(Schedule s : schedules) {
				if(s.getSstartdate().getYear() <= date.getYear()-1900 && date.getYear()-1900 <= s.getSenddate().getYear()) {
					if(s.getSstartdate().getMonth() <= date.getMonth()-1 && date.getMonth()-1 <= s.getSenddate().getMonth()) {
						schedulesByDate.add(s);
					}
				}
			}
									
			// 일정리스트 JSONArray로 변환하기
			if(schedulesByDate != null) {
				JSONArray schedulesJSON = new JSONArray();
				
				for(Schedule s : schedulesByDate) {
					// 각 일정을 JSONObject로 변환하기
					JSONObject sJSON = new JSONObject();
					sJSON.put("sid", s.getSid());
					sJSON.put("sname", s.getSname());
					sJSON.put("sicon", s.getSicon());
					sJSON.put("sstartdate", s.getSstartdate());
					sJSON.put("senddate", s.getSenddate());
					sJSON.put("stime", s.getStime());
					sJSON.put("sdescr", s.getSdescr());
					sJSON.put("tid", s.getTid());
					
					// 변환한 일정을 JSONArray에 넣기
					schedulesJSON.put(sJSON);
				}
				
				// 응답Http 본문에 List를 추가하기
				OutputStream os = response.getOutputStream();
				os.write(schedulesJSON.toString().getBytes());
				os.flush();
				os.close();
			}			
		} catch(IOException e) { e.printStackTrace(); }
	
	}
		
	
	
	// 팀별 일정리스트 생성
	/*@RequestMapping("/schedule/addSchedule")
	public void addSchedule(int tid, String schedule) {
		// 문자열 schedule을 Schedule클래스로 JSON파싱
		JSONObject scheduleJSON = new JSONObject(schedule);
		
		// 시작날짜, 종료날짜를 sql.Date타입으로 변환
		
		
		Schedule s = new Schedule();
		s.setSid(scheduleJSON.getInt("sid"));
		s.setSname(scheduleJSON.getString("sname"));
		s.setSicon(scheduleJSON.getString("sicon"));
		s.setSstartdate();
		s.setSenddate();
		s.setStime();
		s.setSdescr(scheduleJSON.getString("sdescr"));
		s.setTid(scheduleJSON.getInt("tid"));
	}*/
}
