package com.mycompany.myapp.controller;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.mycompany.myapp.dto.Ch14FileInfo;
import com.mycompany.myapp.dto.News;
import com.mycompany.myapp.dto.Teams;
import com.mycompany.myapp.service.TeamService;

@Controller
public class TeamController {
	private static final Logger logger = LoggerFactory.getLogger(TeamController.class);

	@Autowired
	private TeamService teamService;
	
	/*@RequestMapping("/team/addteam")
	public String addteam(String tname, String tdescr,String mid) {
		
		System.out.println(tname);
		System.out.println(tdescr);
		System.out.println(mid);
		
		Teams team = new Teams();
		team.setTname(tname);
		team.setTdescr(tdescr);
		team.setMid(mid);
		//team.setTprofile("");
		teamService.write(team);
		
		return "team/addteam";
	}*/
	
	
	@RequestMapping("/team/addteam")
	public String addteam(String tname,String tdescr, String mid ,MultipartFile tprofile , HttpServletRequest request , HttpSession session){
		String originalFileName = tprofile.getOriginalFilename();
		long size = tprofile.getSize();
		String contentType = tprofile.getContentType();
		String savedFileName = new Date().getTime()+originalFileName;
		
		logger.info("tname: " + tname);
		logger.info("tdescr: " + tdescr);
		logger.info("size: " + size);
		logger.info("contentType: " + contentType);
		logger.info("savedFileName: " + savedFileName);
		
		ServletContext application = request.getServletContext();
		String realPath = application.getRealPath("/WEB-INF/upload/" + savedFileName);
		File file = new File(realPath);
		try {
			tprofile.transferTo(file);
		}  catch (Exception e) {}
		
		Ch14FileInfo fileInfo = new Ch14FileInfo();
		fileInfo.setOriginalFileName(originalFileName);
		fileInfo.setSavedFileName(savedFileName);
		fileInfo.setContentType(contentType);
		fileInfo.setSize(size);
		fileInfo.setDesc(tdescr);;
		
		session.setAttribute("fileInfo", fileInfo);
		
		return "success";
	}
	
	//키워드에 의한 팀 검색
	@RequestMapping("/team/search")
	public void search(String keyword, HttpServletResponse response){
		List<Teams> teamList = teamService.getTeamListByKeyword(keyword);
		
		String mimeType = "application/json";
		//헤더행 추가
		response.setContentType(mimeType);
			
		// 본문에 파일 데이터 출력	
		JSONObject root = new JSONObject();
		if(teamList == null || teamList.size() == 0){
			root.put("result", "fail");
		}else{
			root.put("result", "success");
		}
		
		JSONArray array = new JSONArray();		
		for(Teams team : teamList){
			JSONObject data = new JSONObject();
			data.put("tid", String.valueOf( team.getTid() ) );
			data.put("tname", team.getTname());
			data.put("tdescr", team.getTdescr() != null ? team.getTdescr() : ""  );
			data.put("mid", team.getMid());
			data.put("tprofile", team.getTprofile() != null ?  team.getTprofile() : "");
			data.put("tnum", String.valueOf( team.getTnum() ) );
			array.put(data);
		}
		root.put("list", array);
		System.out.println(root.toString());
		// 출력 스트림 얻기
		OutputStream os;
		try {
			os = response.getOutputStream();
			String str = root.toString();
			os.write(str.getBytes());
			os.flush();
			os.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// id에 의한 팀 리스트
	@RequestMapping("/team/list")
	public void list(String mid, HttpServletResponse response){
		List<Teams> teamList = teamService.getTeamListByMid(mid);

		String mimeType = "application/json";
		//헤더행 추가
		response.setContentType(mimeType);
			
		
		// 본문에 파일 데이터 출력	
		JSONObject root = new JSONObject();
		if(teamList == null || teamList.size() == 0){
			root.put("result", "fail");
		}else{
			root.put("result", "success");
		}
		
		JSONArray array = new JSONArray();		
		for(Teams team : teamList){
			JSONObject data = new JSONObject();
			data.put("tid", String.valueOf( team.getTid() ) );
			data.put("tname", team.getTname());
			data.put("tdescr", team.getTdescr() != null ? team.getTdescr()  : "");
			data.put("mid", team.getMid());
			data.put("tprofile", team.getTprofile() != null ? team.getTprofile()  : "");
			array.put(data);
		}
		root.put("list", array);
	
		// 출력 스트림 얻기
		OutputStream os;
		try {
			os = response.getOutputStream();
			String str = root.toString();
			os.write(str.getBytes());
			
			os.flush();

			os.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	
	//소식 리스트 얻기
	@RequestMapping("/team/news/list")
	public void newsList(int tid, HttpServletResponse response) {
		List<News> list = teamService.getNewsListByTid(tid);
		String mimeType = "application/json";
		response.setContentType(mimeType);
		
		JSONObject root = new JSONObject();
		if((list==null)||(list.size()==0)) {
			root.put("newsResult", "fail");
		}else {
			root.put("newsResult", "success");
			JSONArray newsArray = new JSONArray();
			for(News news:list) {
				JSONObject newsJson = new JSONObject();
				newsJson.put("nid", news.getNid());
				newsJson.put("mid", news.getMid());
				newsJson.put("mprofile", news.getMprofile() != null?news.getMprofile():"");
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				newsJson.put("ndate", sdf.format(news.getNdate()));
				newsJson.put("ncontent", news.getNcontent());
				newsJson.put("nphotoname", news.getNphotoname() != null?news.getNphotoname():"");
				newsJson.put("ndataname", news.getNdataname());
				newsJson.put("nisnotice", news.getNisnotice());
				newsJson.put("tid", news.getTid());
				newsArray.put(newsJson);
			}
			root.put("list", newsArray);
		}
		
		// 출력 스트림 얻기
		OutputStream os;
		try {
			os = response.getOutputStream();
			String str = root.toString();
			os.write(str.getBytes());
			
			os.flush();

			os.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
	}
}
