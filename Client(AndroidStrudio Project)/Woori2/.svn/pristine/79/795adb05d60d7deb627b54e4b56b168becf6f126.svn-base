package com.example.myapplication.actionbar.calendar;


import android.annotation.TargetApi;
import android.app.ActionBar;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.example.myapplication.MainActivity;
import com.example.myapplication.R;
import com.example.myapplication.dto.Schedule;
import com.example.myapplication.network.Network3;

public class AddScheduleFragment extends Fragment {
    private LinearLayout datePickerLayout;
    private LinearLayout iconSelectLayout;
    private Button iconSchedule;
    private Button btnFinishAddingSchedule;
    private TextView txtFldStartDate;
    private TextView txtFldEndDate;
    private EditText txtScheduleTitle;
    private EditText txtScheduleLocation;
    private EditText txtScheduleContent;
    private DatePicker datePicker;
    private LinearLayout selectStartDate;
    private LinearLayout selectEndDate;

    // 아이콘
    private ImageButton siconExperiment;
    private ImageButton siconExercise;
    private ImageButton siconGame;
    private ImageButton siconMeal;
    private ImageButton siconMeeting;
    private ImageButton siconFootball;
    private ImageButton siconAlcohol;
    private ImageButton siconParty;
    private ImageButton siconPresentation;
    private ImageButton siconTrophy;
    private ImageButton siconStudy;
    private ImageButton siconMusic;
    private TextView txtStartDateLabel;
    private TextView txtEndDateLabel;

    private String siconName;

    public AddScheduleFragment() { }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        siconName = "sicon_meal";

        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_add_schedule, container, false);

        // 필드 Views 인플레이션
        datePickerLayout = (LinearLayout) view.findViewById(R.id.datePickerLayout);
        txtFldStartDate = (TextView) view.findViewById(R.id.txtFldStartDate);
        txtFldEndDate = (TextView) view.findViewById(R.id.txtFldEndDate);
        btnFinishAddingSchedule = (Button) view.findViewById(R.id.btnFinishAddingSchedule);
        txtScheduleTitle = (EditText) view.findViewById(R.id.txtScheduleTitle);
        txtScheduleLocation = (EditText) view.findViewById(R.id.txtScheduleLocation);
        txtScheduleContent = (EditText) view.findViewById(R.id.txtScheduleContent);
        iconSelectLayout = (LinearLayout) view.findViewById(R.id.iconSelectLayout);
        iconSchedule = (Button) view.findViewById(R.id.iconSchedule);
        datePicker = (DatePicker) view.findViewById(R.id.datePicker);
        txtStartDateLabel = (TextView) view.findViewById(R.id.txtStartDateLabel);
        txtEndDateLabel = (TextView) view.findViewById(R.id.txtEndDateLabel);

        siconExperiment = (ImageButton) view.findViewById(R.id.siconExperiment);
        siconExercise = (ImageButton) view.findViewById(R.id.siconExercise);
        siconGame = (ImageButton) view.findViewById(R.id.siconGame);
        siconMeal = (ImageButton) view.findViewById(R.id.siconMeal);
        siconMeeting = (ImageButton) view.findViewById(R.id.siconMeeting);
        siconFootball = (ImageButton) view.findViewById(R.id.siconFootball);
        siconAlcohol = (ImageButton) view.findViewById(R.id.siconAlcohol);
        siconParty = (ImageButton) view.findViewById(R.id.siconParty);
        siconPresentation = (ImageButton) view.findViewById(R.id.siconPresentation);
        siconTrophy = (ImageButton) view.findViewById(R.id.siconTrophy);
        siconStudy = (ImageButton) view.findViewById(R.id.siconStudy);
        siconMusic = (ImageButton) view.findViewById(R.id.siconMusic);
        selectStartDate = (LinearLayout) view.findViewById(R.id.selectStartDate);
        selectEndDate = (LinearLayout) view.findViewById(R.id.selectEndDate);

        ImageButton[] sicons = new ImageButton[12];
        sicons[0] = siconExperiment;
        sicons[1] = siconExercise;
        sicons[2] = siconGame;
        sicons[3] = siconMeal;
        sicons[4] = siconMeeting;
        sicons[5] = siconFootball;
        sicons[6] = siconAlcohol;
        sicons[7] = siconParty;
        sicons[8] = siconPresentation;
        sicons[9] = siconTrophy;
        sicons[10] = siconStudy;
        sicons[11] = siconMusic;

        // 시작날짜 세팅
        setStartDate(MainActivity.startDate);


        // 아이콘선택 버튼이벤트처리
        for(ImageButton sicon : sicons) {
            sicon.setOnClickListener(onClickListenerImgBtnSicon);
        }


        // 일정추가완료 버튼이벤트처리
        btnFinishAddingSchedule.setOnClickListener(onClickListenerBtnFinishAddingSchedule);


        // 일정아이콘 선택하기 화면 나오는 버튼이벤트처리
        iconSchedule.setOnClickListener(onClickBtnIconSchedule);

        // 공백클릭하면 datePickerLayout사라지기
        datePickerLayout.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        // 공백클릭하면 iconSelectLayout사라지기
        iconSelectLayout.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                v.setVisibility(View.INVISIBLE);
                return true;
            }
        });


        return view;
    }

    // 일정추가완료 버튼이벤트
    private View.OnClickListener onClickListenerBtnFinishAddingSchedule = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            // 일정추가 유효성검사
            // 일정제목이 비어있는 경우
            if(txtScheduleTitle.getText().toString().getBytes().length <= 0) {
                // 에러메시지
                Toast.makeText (v.getContext(), "일정제목을 입력해주세요.", Toast.LENGTH_LONG).show();
                return;
            }

            // 시작날짜, 종료날짜가 비어있는 경우
            if(txtFldStartDate.getText().toString().getBytes().length <= 0 || txtFldEndDate.getText().toString().getBytes().length <= 0) {
                // 에러메시지
                Toast.makeText (v.getContext(), "날짜를 모두 입력해주세요.", Toast.LENGTH_LONG).show();
                return;
            }

            String startDateStr = txtFldStartDate.getText().toString();
            String endDateStr = txtFldEndDate.getText().toString();


            // 일정을 DTO에 세팅
            Schedule s = new Schedule();
            s.setSname(txtScheduleTitle.getText().toString());
            s.setSstartdate(startDateStr);
            s.setSenddate(endDateStr);
            //s.setStime(txtTime.getText().toString());
            s.setSlocation(txtScheduleLocation.getText().toString());
            s.setSicon(siconName);
            s.setSdescr(txtScheduleContent.getText().toString());
            s.setTid(MainActivity.tid);

            // 일정을 DB에 저장
            Network3.addSchedule(s);

            getActivity()
                    .getSupportFragmentManager()
                    .beginTransaction()
                    .replace(R.id.fragmentContainer, new CalendarFragment())
                    .commit();

            MainActivity.presentFragment = "CalendarFragment";
            getActivity().invalidateOptionsMenu();
        }
    };

    // 시작날짜선택하기화면나오는 버튼이벤트
    private View.OnClickListener onClickListenerBtnStartDate = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            txtFldEndDate.setText(null);
            datePickAndApply(v);
        }
    };

    // 종료날짜선택하기화면나오는 버튼이벤트
    private View.OnClickListener onClickListenerBtnEndDate = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            datePickAndApply(v);
        }
    };


    // 날짜선택 Layout보여지고 선택된 날짜를 EditText에 적용하기
    private void datePickAndApply(View v) {
        datePickerLayout.setVisibility(View.VISIBLE);

        if(v.getId() == R.id.btnStartDate) {
            // 시작날짜선택완료 버튼이벤트처리
            Button btnFinishDatePick = (Button) datePickerLayout.findViewById(R.id.btnFinishDatePick);
            btnFinishDatePick.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    String dateStr = datePicker.getYear() + "-" + (datePicker.getMonth()+1) + "-" + datePicker.getDayOfMonth();
                    txtFldStartDate.setText(dateStr);
                    datePickerLayout.setVisibility(View.INVISIBLE);
                }
            });

        } else if(v.getId() == R.id.btnEndDate) {

            // 종료날짜선택완료 버튼이벤트처리
            Button btnFinishDatePick = (Button) datePickerLayout.findViewById(R.id.btnFinishDatePick);
            btnFinishDatePick.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {


                    // 시작날짜가 먼저 선택되었는지 검사
                    if(txtFldStartDate.getText().toString().getBytes().length <= 0) {
                        Toast.makeText(v.getContext(), "시작날짜를 먼저 선택해주세요.", Toast.LENGTH_LONG).show();

                    } else {
                        // 종료날짜가 시작날짜보다 작은 경우 에러메시지 띄우기
                        // 선택된 종료날짜 얻기
                        String dateStr = datePicker.getYear() + "-" + (datePicker.getMonth()+1) + "-" + datePicker.getDayOfMonth();
                        txtFldEndDate.setText(dateStr);

                        String[] startDate = txtFldStartDate.getText().toString().split("-");
                        String[] endDate = txtFldEndDate.getText().toString().split("-");

                        if (Integer.parseInt(endDate[0]) < Integer.parseInt(startDate[0])) {
                            // 에러메시지
                            Toast.makeText (v.getContext(), "종료날짜(연도)가 시작날짜보다 빠릅니다", Toast.LENGTH_LONG).show();
                            txtFldEndDate.setText("");
                            return;
                        } else if(Integer.parseInt(endDate[0]) == Integer.parseInt(startDate[0])){
                            if(Integer.parseInt(endDate[1]) < Integer.parseInt(startDate[1])) {
                                // 에러메시지
                                Toast.makeText (v.getContext(), "종료날짜(월)가 시작날짜보다 빠릅니다", Toast.LENGTH_LONG).show();
                                txtFldEndDate.setText("");
                                return;
                            } else if(Integer.parseInt(endDate[1]) == Integer.parseInt(startDate[1])) {
                                if(Integer.parseInt(endDate[2]) < Integer.parseInt(startDate[2])) {
                                    // 에러메시지
                                    Toast.makeText (v.getContext(), "종료날짜(일)가 시작날짜보다 빠릅니다", Toast.LENGTH_LONG).show();
                                    txtFldEndDate.setText("");
                                    return;
                                }
                            }
                        }
                    }
                    //btnStartDate.requestFocus();
                    datePickerLayout.setVisibility(View.INVISIBLE);
                }
            });
        }
    }

    // 일정아이콘 선택하기 화면 버튼이벤트
    private View.OnClickListener onClickBtnIconSchedule = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            iconSelectLayout.setVisibility(View.VISIBLE);
        }
    };


    // 선택된 아이콘에 따라 일정아이콘 변경
    private View.OnClickListener onClickListenerImgBtnSicon = new View.OnClickListener() {
        @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
        @Override
        public void onClick(View v) {
            if(v.getId() == siconExperiment.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_experiment));
                siconName = "sicon_experiment";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconExercise.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_exercise));
                siconName = "sicon_exercise";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconGame.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_game));
                siconName = "sicon_game";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconMeal.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_meal));
                siconName = "sicon_meal";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconMeeting.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_meeting));
                siconName = "sicon_meeting";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconFootball.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_football));
                siconName = "sicon_football";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconAlcohol.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_alcohol));
                siconName = "sicon_alcohol";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconParty.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_party));
                siconName = "sicon_party";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconPresentation.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_presentation));
                siconName = "sicon_presentation";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconTrophy.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_trophy));
                siconName = "sicon_trophy";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconStudy.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_study));
                siconName = "sicon_study";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            } else if(v.getId() == siconMusic.getId()) {
                iconSchedule.setBackground(getActivity().getResources().getDrawable(R.drawable.sicon_music));
                siconName = "sicon_music";
                iconSelectLayout.setVisibility(View.INVISIBLE);
            }
        }
    };

    // set 시작날짜
    private void setStartDate(String date) {
        String[] dateArr = date.split("-");
        dateArr[1] = strToEngMonth(dateArr[1]);
        String newDateStr = " " + dateArr[1] + " " + dateArr[2] + ", " + dateArr[0];
        txtStartDateLabel.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT));
        txtFldStartDate.setText(newDateStr);
    }

    // set 종료날짜
    private void setEndDate(String date) {
        String[] dateArr = date.split("-");
        dateArr[1] = strToEngMonth(dateArr[1]);
        String newDateStr = " " + dateArr[1] + " " + dateArr[2] + ", " + dateArr[0];
        txtEndDateLabel.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ActionBar.LayoutParams.WRAP_CONTENT));
        txtFldEndDate.setText(date);
    }

    // 숫자 Month를 영어로 변경
    private String strToEngMonth(String month) {
        if(month.equals("1")) { return "Jan"; }
        if(month.equals("2")) { return "Feb"; }
        if(month.equals("3")) { return "Mar"; }
        if(month.equals("4")) { return "Apr"; }
        if(month.equals("5")) { return "May"; }
        if(month.equals("6")) { return "Jun"; }
        if(month.equals("7")) { return "Jul"; }
        if(month.equals("8")) { return "Aug"; }
        if(month.equals("9")) { return "Sep"; }
        if(month.equals("10")) { return "Oct"; }
        if(month.equals("11")) { return "Nov"; }
        if(month.equals("12")) { return "Dec"; }
        return "...";
    }
}
